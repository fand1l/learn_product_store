import datetime
import sqlite3

class Store:
    def __init__(self):
        self.conn = sqlite3.connect("store.db")
        self.cursor = self.conn.cursor()

    def create_tables(self):
        self.cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                category TEXT,
                price REAL
            );
            """
        )

        self.cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS customer (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                first_name TEXT,
                last_name TEXT,
                email TEXT UNIQUE
            );
            """
        )

        self.cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                customer_id INTEGER,
                product_id INTEGER,
                quantity INTEGER,
                order_date TEXT,
                FOREIGN KEY(customer_id) REFERENCES customer(id),
                FOREIGN KEY(product_id) REFERENCES product(id)
            );
            """
        )

    
    def insert_simple_data(self):
        self.cursor.execute(
            "INSERT INTO products (name, category, price) VALUES (?, ?, ?)",
            ("iPhone 13", "–°–º–∞—Ä—Ç—Ñ–æ–Ω–∏", "1399.99"),
        )

        self.cursor.execute(
            "SELECT id FROM customer WHERE email = ?", ("oleg@example.com",)
        )
        if not self.cursor.fetchone():
            self.cursor.execute(
                "INSERT INTO customer (first_name, last_name, email) VALUES (?, ?, ?)",
                ("–û–ª–µ–≥", "–ü–µ—Ç—Ä–µ–Ω–∫–æ", "oleg@example.com"),
            )
        
        self.cursor.execute(
            "INSERT INTO orders (customer_id, product_id, quantity, order_date) VALUES (?, ?, ?, ?)",
            (1, 1, 2, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")),
        )

        self.cursor.execute(
            "INSERT INTO products (name, category, price) VALUES (?, ?, ?)",
            ("Samsung Galaxy S21", "–°–º–∞—Ä—Ç—Ñ–æ–Ω–∏", "1199.99"),
        )

        self.cursor.execute(
            "SELECT id FROM customer WHERE email = ?", ("maria@example.com",)
        )
        if not self.cursor.fetchone():
            self.cursor.execute(
                "INSERT INTO customer (first_name, last_name, email) VALUES (?, ?, ?)",
                ("–ú–∞—Ä—ñ—è", "–Ü–≤–∞–Ω–æ–≤–∞", "maria@example.com"),
            )
        
        self.cursor.execute(
            "INSERT INTO orders (customer_id, product_id, quantity, order_date) VALUES (?, ?, ?, ?)",
            (2, 2, 1, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")),
        )

        self.conn.commit()

    def total_sales(self):
        result = self.cursor.execute(
            """
            SELECT SUM(p.price * o.quantity)
            FROM orders o
            JOIN products p ON o.product_id = p.id
            """
        ).fetchall()

        print(f"–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ –ø—Ä–æ–¥–∞–∂—ñ–≤: {result[0][0]} –≥—Ä–Ω")

    def most_popular_category(self):
        result = self.cursor.execute(
            """
            SELECT p.category, COUNT(*) AS count
            FROM orders o
            JOIN products p ON o.product_id = p.id
            GROUP BY p.category
            ORDER BY count DESC
            LIMIT 1
            """
        ).fetchall()

        print(f"–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∞ –∫–∞—Ç–µ–≥—Ä—ñ—è: {result[0][0]}")

    def insert_order(self, customer_id, product_id, quantity):
        order_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.cursor.execute(
            "INSERT INTO orders (customer_id, product_id, quantity, order_date) VALUES (?, ?, ?, ?)",
            (customer_id, product_id, quantity, order_date),
        )

    def orders_per_customer(self):
        result = self.cursor.execute(
            """
            SELECT c.first_name || ' ' || c.last_name AS customer, COUNT(o.id) AS total_orders
            FROM customer c
            LEFT JOIN orders o ON c.id = o.customer_id
            GROUP BY c.id
            """
        ).fetchall()
        for row in result:
            print(f"{row[0]} ‚Äì {row[1]} –∑–∞–º–æ–≤–ª–µ–Ω—å")
            
    def average_order_value(self):
        result = self.cursor.execute(
            """
            SELECT AVG(p.price * o.quantity)
            FROM orders o
            JOIN products p ON o.product_id = p.id
            """
        ).fetchone()
        
        print(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {result[0]:.2f} –≥—Ä–Ω")

    def product_per_category(self):
        result = self.cursor.execute(
            """
            SELECT category, COUNT(*) FROM products GROUP BY category
            """
        ).fetchall()

        for category, count in result:
            print(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category} - {count} —Ç–æ–≤–∞—Ä—ñ–≤")

    def update_prices(self):
        self.cursor.execute(
            "UPDATE products SET price = price * 1.10 WHERE category = '—Å–º–∞—Ä—Ç—Ñ–æ–Ω–∏'"
        )
        print("–¶—ñ–Ω–∏ –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ +10%")

    def run_cli(self):
        while True:
            print("\nüìã --- –ú–ï–ù–Æ ---")
            print("1. ‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
            print("2. üë§ –î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
            print("3. üõí –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            print("4. üí∞ –°—É–º–∞—Ä–Ω–∏–π –æ–±—Å—è–≥ –ø—Ä–æ–¥–∞–∂—ñ–≤")
            print("5. üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞")
            print("6. üí∏ –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            print("7. üèÜ –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è")
            print("8. üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö")
            print("9. üìà –ó–±—ñ–ª—å—à–∏—Ç–∏ —Ü—ñ–Ω–∏ –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∏ –Ω–∞ 10%")
            print("10. üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏ –≤ –±–∞–∑—ñ")
            print("0. üö™ –í–∏—Ö—ñ–¥")

            choice = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –æ–ø—Ü—ñ—ó: ")

            if choice == "1":
                name = input("–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É: ")
                category = input("–ö–∞–≥–æ—Ä—ñ—è (—Å–º–∞—Ä—Ç—Ñ–æ–Ω–∏/–Ω–æ—É—Ç–±—É–∫–∏/–ø–ª–∞–Ω—à–µ—Ç–∏): ")
                price = float(input("–¶—ñ–Ω–∞: "))
                self.cursor.execute(
                    "INSERT INTO products (name, category, price) VALUES (?, ?, ?)",
                    (name, category, price),
                )
                print("–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ")

            elif choice == "2":
                first = input("–Ü–º'—è: ")
                last = input("–ü—Ä—ñ–∑–≤–∏—â–µ: ")
                email = input("Email: ")
                try:
                    self.cursor.execute(
                        "INSERT INTO customers (first_name, last_name, email) VALUES (?, ?, ?)",
                        (first, last, email),
                    )
                    print("–ö–ª—ñ—î–Ω—Ç–∞ –¥–æ–¥–∞–Ω–æ!")
                except sqlite3.IntegrityError:
                    print("Email –≤–∂–µ —ñ—Å–Ω—É—î!")

            elif choice == "3":
                try:
                    cid = int(input("ID –∫–ª—ñ—î–Ω—Ç–∞: "))
                    pid = int(input("ID —Ç–æ–≤–∞—Ä—É: "))
                    qty = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å: "))
                    self.insert_order(cid, pid, qty)
                    print("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ")
                except Exception as e:
                    print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", e)

            elif choice == "4":
                self.total_sales()

            elif choice == "5":
                self.orders_per_customer()

            elif choice == "6":
                self.average_order_value()

            elif choice == "7":
                self.most_popular_category()

            elif choice == "8":
                self.product_per_category()

            elif choice == "9":
                self.update_prices()

            elif choice == "10":
                self.conn.commit()

            elif choice == "0":
                self.conn.close()
                print("–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!")
                break
                
            else:
                print("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
                
                
if __name__ == "__main__":
    store = Store()
    store.create_tables()
    store.insert_simple_data()
    store.run_cli()

